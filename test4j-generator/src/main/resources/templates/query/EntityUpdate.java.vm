package ${entityUpdate.package};

import cn.org.atool.fluent.mybatis.base.IEntityUpdate;
import cn.org.atool.fluent.mybatis.base.IProperty2Column;
import com.baomidou.mybatisplus.core.conditions.AbstractWrapper;
import com.baomidou.mybatisplus.core.conditions.segments.MergeSegments;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;
import com.baomidou.mybatisplus.core.toolkit.StringPool;
import com.baomidou.mybatisplus.core.toolkit.StringUtils;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

import ${entity.package}.${entity.name};
import ${mapping.package}.${mapping.name};
import ${wrapperHelper.package}.${wrapperHelper.name}.And;
import ${wrapperHelper.package}.${wrapperHelper.name}.Set;
import ${wrapperHelper.package}.${wrapperHelper.name}.UpdateOrder;

/**
 * @ClassName ${entityUpdate.name}
 * @Description ${entity.name}更新设置
 *
 * @author ${author}
 */
public class ${entityUpdate.name} extends AbstractWrapper<${entity.name}, String, ${entityUpdate.name}>
    implements IEntityUpdate<${entityUpdate.name}>, IProperty2Column {
    /**
    * SQL 更新字段内容，例如：name='1',age=2
    */
    private final List<String> sqlSet;

    private final Map<String, Object> updates = new HashMap<>();

    public final And<${entityUpdate.name}> and = new And<>(this);

    public final Set set = new Set(this);

    public final UpdateOrder orderBy = new UpdateOrder(this);

    public ${entityUpdate.name}(){
        // 如果无参构造函数，请注意实体 NULL 情况 SET 必须有否则 SQL 异常
        this(null);
    }

    public ${entityUpdate.name}(${entity.name} entity) {
        super.setEntity(entity);
        super.initNeed();
        this.sqlSet = new ArrayList<>();
    }

    private ${entityUpdate.name}(${entity.name} entity, List<String> sqlSet, AtomicInteger paramNameSeq,
        Map<String, Object> paramNameValuePairs, MergeSegments mergeSegments) {
        super.setEntity(entity);
        this.sqlSet = sqlSet;
        this.paramNameSeq = paramNameSeq;
        this.paramNameValuePairs = paramNameValuePairs;
        this.expression = mergeSegments;
    }

    @Override
    public String getSqlSet() {
        if (CollectionUtils.isEmpty(sqlSet)) {
            return null;
        }
        return String.join(StringPool.COMMA, sqlSet);
    }

    @Override
    public Map<String, String> getProperty2Column() {
        return ${mapping.name}.Property2Column;
    }

    @Override
    public Map<String, ? extends Object> getUpdates() {
        return this.updates;
    }

    @Override
    public ${entityUpdate.name} set(boolean condition, String column, Object value){
        if(condition){
            this.updates.put(column, value);
        }
        return this;
    }

    @Override
    public ${entityUpdate.name} setSql(boolean condition, String sql) {
        if (condition && StringUtils.isNotEmpty(sql)) {
            sqlSet.add(sql);
        }
        return this;
    }

    public LambdaUpdateWrapper<${entity.name}> lambda() {
        throw new RuntimeException("no support!");
    }

    @Override
    protected ${entityUpdate.name} instance() {
        return new ${entityUpdate.name}(entity, sqlSet, paramNameSeq, paramNameValuePairs, new MergeSegments());
    }


    @Override
    public ${entityUpdate.name} limit(int from, int limit){
        super.last(String.format("limit %d, %d", from, limit));
        return this;
    }

    @Override
    public ${entityUpdate.name} limit(int limit){
        super.last(String.format("limit %d", limit));
        return this;
    }
}
