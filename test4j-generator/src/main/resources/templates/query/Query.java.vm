package ${cfg.packEntityQuery};
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyColumnName=${field.name})
    #end
#end

import cn.org.atool.fluent.mybatis.base.IEntityQuery;
import cn.org.atool.fluent.mybatis.base.IProperty2Column;
import cn.org.atool.fluent.mybatis.util.MybatisUtil;
import com.baomidou.mybatisplus.core.conditions.AbstractWrapper;
import com.baomidou.mybatisplus.core.conditions.SharedString;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.segments.MergeSegments;
import com.baomidou.mybatisplus.core.metadata.TableFieldInfo;
import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
import com.baomidou.mybatisplus.core.toolkit.ArrayUtils;
import com.baomidou.mybatisplus.core.toolkit.StringPool;

import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Predicate;

import ${package.Entity}.${entity};
import ${cfg.packMP}.${cfg.fileMP};
import ${cfg.packMP}.${cfg.fileMP}.Column;
import ${cfg.packEntityQuery}.${entity}WrapperHelper.And;
import ${cfg.packEntityQuery}.${entity}WrapperHelper.QueryOrder;

/**
 * @ClassName ${entity}Query
 * @Description ${entity}查询（删除）条件
 *
 * @author ${author}
 */
public class ${cfg.fileEntityQuery} extends AbstractWrapper<${entity}, String, ${cfg.fileEntityQuery}>
    implements IEntityQuery<${cfg.fileEntityQuery}, ${entity}>, IProperty2Column {
    /**
     * 查询字段
     */
    private SharedString sqlSelect = new SharedString();

    public final And<${cfg.fileEntityQuery}> and = new And<>(this);

    public final QueryOrder orderBy = new QueryOrder(this);

    public ${cfg.fileEntityQuery}(){
        this(null);
    }

    public ${cfg.fileEntityQuery}(${entity} entity){
        super.setEntity(entity);
        super.initNeed();
    }

    public ${cfg.fileEntityQuery}(${entity} entity, String... columns){
        super.setEntity(entity);
        super.initNeed();
        this.select(columns);
    }

    /**
     * 非对外公开的构造方法,只用于生产嵌套 sql
     */
    private ${cfg.fileEntityQuery}(${entity} entity, AtomicInteger paramNameSeq,
        Map<String, Object> paramNameValuePairs, MergeSegments mergeSegments) {
        super.setEntity(entity);
        this.entityClass = ${entity}.class;
        this.paramNameSeq = paramNameSeq;
        this.paramNameValuePairs = paramNameValuePairs;
        this.expression = mergeSegments;
    }

    @Override
    public ${cfg.fileEntityQuery} select(String... columns) {
        if (ArrayUtils.isNotEmpty(columns)) {
            this.sqlSelect.setStringValue(String.join(StringPool.COMMA, columns));
        }
        return this;
    }

    @Override
    public ${cfg.fileEntityQuery} select(Predicate<TableFieldInfo> predicate) {
        this.entityClass = ${entity}.class;
        this.sqlSelect.setStringValue(TableInfoHelper.getTableInfo(getCheckEntityClass()).chooseSelect(predicate));
        return this;
    }

    @Override
    public ${cfg.fileEntityQuery} select(Class<${entity}> entityClass, Predicate<TableFieldInfo> predicate) {
        this.entityClass = entityClass;
        this.sqlSelect.setStringValue(TableInfoHelper.getTableInfo(getCheckEntityClass()).chooseSelect(predicate));
        return this;
    }

    @Override
    public String getSqlSelect() {
        return sqlSelect.getStringValue();
    }

    /**
     * 只查询主键字段
     *
     * @return
     */
    public ${cfg.fileEntityQuery} selectId(){
        #if(${keyColumnName})
        return this.select(Column.${keyColumnName});
        #else
        throw new RuntimeException("table primary undefined!");
        #end
    }

    @Override
    public ${cfg.fileEntityQuery} distinct(String... columns){
        if(ArrayUtils.isNotEmpty(columns)){
            this.sqlSelect.setStringValue(MybatisUtil.distinct(columns));
        }
        return this;
    }

    public ${cfg.fileEntityQuery} distinct(Predicate<TableFieldInfo> predicate) {
        this.entityClass = ${entity}.class;
        this.sqlSelect.setStringValue(MybatisUtil.distinct(getCheckEntityClass(), predicate));
        return this;
    }

    public ${cfg.fileEntityQuery} distinct(Class<${entity}> entityClass, Predicate<TableFieldInfo> predicate) {
        this.entityClass = entityClass;
        this.sqlSelect.setStringValue(MybatisUtil.distinct(getCheckEntityClass(), predicate));
        return this;
    }


    /**
     * 暂不支持
     */
    public LambdaQueryWrapper<${entity}> lambda() {
        throw new RuntimeException("no support!");
    }

    /**
    * <p>
    * 用于生成嵌套 sql
    * 故 sqlSelect 不向下传递
    * </p>
    */
    @Override
    protected ${cfg.fileEntityQuery} instance() {
        return new ${cfg.fileEntityQuery}(entity, paramNameSeq, paramNameValuePairs, new MergeSegments());
    }

    @Override
    public Map<String, String> getProperty2Column(){
        return ${cfg.fileMP}.Property2Column;
    }

    @Override
    public ${cfg.fileEntityQuery} limit(int from, int limit){
        super.last(String.format("limit %d, %d", from, limit));
        return this;
    }

    @Override
    public ${cfg.fileEntityQuery} limit(int limit){
        super.last(String.format("limit %d", limit));
        return this;
    }
}